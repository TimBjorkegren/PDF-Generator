<?php

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Route;
use OpenAI\Laravel\Facades\OpenAI;
use GuzzleHttp\Client;
use Symfony\Component\DomCrawler\Crawler;
use OpenAI\Client as OpenAIClient;
use OpenAI\Factory as OpenAIFactory;


Route::post('/generate-observations', function (Request $request) {
    set_time_limit(120); // sÃ¤kerstÃ¤ll att PHP inte dÃ¶r fÃ¶r tidigt
    ini_set('max_execution_time', 120);


    $companyName = $request->input('domainName');
    $myCompanyName = "VÃ¥ning 18";
    $domainLink = $request->query("domainLink");
     $domainLink = urldecode($domainLink);
    $scrapedData = $request->input('scrapedData', []);

    $client = new \GuzzleHttp\Client([
    'timeout' => 90,
    'connect_timeout' => 15,
    ]);

    $openai = (new OpenAIFactory())
    ->withApiKey(env('OPENAI_API_KEY'))
    ->withHttpClient($client) // ğŸ‘ˆ hÃ¤r sÃ¤tts din egen timeout
    ->make();

    $scrapedTextSummary = "";
    if (!empty($scrapedData)) {
        $scrapedTextSummary = "HÃ¤r Ã¤r information frÃ¥n deras sida:\n";
        $scrapedTextSummary .= "Title: " . ($scrapedData['meta']['title'] ?? 'N/A') . "\n";
        $scrapedTextSummary .= "Description: " . ($scrapedData['meta']['description'] ?? 'N/A') . "\n";
        $scrapedTextSummary .= "H1: " . implode(', ', $scrapedData['headings']['h1'] ?? []) . "\n";
        $scrapedTextSummary .= "H2: " . implode(', ', $scrapedData['headings']['h2'] ?? []) . "\n";
        $scrapedTextSummary .= "Paragraphs: " . implode(' | ', $scrapedData['paragraphs'] ?? []) . "\n";
    }

    $prompt = "Generera SEO-observationer fÃ¶r {$companyName}.
    AnvÃ¤nd dig utav {$scrapedTextSummary} fÃ¶r att besvara punkter sÃ¥ vi kan gÃ¶ra det sÃ¥ personligt som mÃ¶jligt, markera tydligt nÃ¤r du anvÃ¤nder dig utav den information sÃ¥ jag kan se ifall det fungerar.
    Svara i JSON-format med fÃ¶ljande nycklar: 
    {
      \"Teknisk\": \"...\",
      \"Onpage\": \"...\",
      \"Offpage\": \"...\",
      \"Ready\": \"...\",
      \"Q1_Seo_Teknisk\": \"...\",
      \"Q1_Nyckelord_Atgard\": \"...\",
      \"Q1_Konkurrent_Kpi\": \"...\",
      \"Q1_SpÃ¥rning_Offpage\": \"...\",
      \"Q1_Title_Meta_Head_Url\": \"...\",
      \"Q1_Sajtstruktur_LÃ¤nkar\": \"...\",
      \"Q1_InnehÃ¥llsplan\": \"...\",
      \"Q1_Offpage\": \"...\",
      \"Q2_Publicera_Art_Guide\": \"...\",
      \"Q2_Uppdatera_InnehÃ¥ll\": \"...\",
      \"Q2_Bygga_Authority\": \"...\",
      \"Q2_LÃ¤nkstrategi_Outreach\": \"...\",
      \"Q2_Offpage\": \"...\",
      \"Q3_Nya_Landningssidor\": \"...\",
      \"Q3_Lokal_Seo\": \"...\",
      \"Q3_Cro\": \"...\",
      \"Q3_Schema_Markup_Rich_Results\": \"...\",
      \"Q3_Offpage\": \"...\",
      \"Q4_UtvÃ¤rdera_rankingar_trafik\": \"...\",
      \"Q4_Skapa_Avancerat_InnehÃ¥ll\": \"...\",
      \"Q4_Bygga_Starkare_LÃ¤nkar\": \"...\",
      \"Q4_Utbildning_Kund\": \"...\",
      \"Q4_Offpage\": \"...\",
      \"Q4_Arsrapport\": \"...\",
      \"Q4_Roi_Analys\": \"...\",
      \"Q4_StrategimÃ¶te_Plan\": \"...\",
    }

    Instruktioner:
    1. FÃ¶rklara allt enkelt, som om kunden aldrig har jobbat med SEO.
    2. AnvÃ¤nd inga programmeringstermer â€“ det ska vara lÃ¤tt att fÃ¶rstÃ¥.
    3. Under Ready skriv en personlig, varm och fÃ¶rtroendeingivande inbjudan dÃ¤r ni fÃ¶rsÃ¶ker sÃ¤lja in era tjÃ¤nster.  
    AnvÃ¤nd gÃ¤rna fÃ¶retagets namn {$companyName} och vÃ¥rt fÃ¶retagsnamn {$myCompanyName}.  
    Avsluta med en Ã¶ppen frÃ¥ga som uppmuntrar till nÃ¤sta steg, t.ex. boka mÃ¶te.
    4. FÃ¶r varje Q1, Q2, Q3, Q4 nedan, fÃ¶rklara varfÃ¶r det Ã¤r viktigt, dessa Ã¤r
    vÃ¥ra huvudaktiviteter som ingÃ¥r sÃ¥ vi ska fÃ¶rklara till en kund vad som sker dÃ¤r, och sammanfatta det sÃ¥ de fÃ¶rstÃ¥r.
    
    Viktigt:
    - FÃ¶r alla Q2, Q3 och Q4, skriv lÃ¤ngre, utfÃ¶rliga men enkla fÃ¶rklaringar, skriv de gÃ¤rna lÃ¥nga men med bra information. Du kan ge nÃ¥gra exempel med. 
    - Undvik tekniska ord.
    - Prioritera tydlighet och vÃ¤rme framfÃ¶r korthet.
    - Undvik att skriva Q1 fÃ¶r lÃ¥nga.
    
    
    Q1_Seo_Teknisk: SEO-audit och teknisk analys:
    Q1_Nyckelord_Ã…tgÃ¤rd: Nyckelordsanalys och Ã…tgÃ¤rdsplan:
    Q1_Konkurrent_Kpi: Kokurrentanalys och KPI-sÃ¤ttning:
    Q1_SpÃ¥rning_Offpage: spÃ¥rning (GA4/GSC) och Offpage:
    Q1_Title_Meta_Head_Url: Optimera titlar, metabeskrivningar, headings och URL-struktur:
    Q1_Sajtstruktur_LÃ¤nkar: Skapa sajtstruktur och interna lÃ¤nkar:
    Q1_InnehÃ¥llsplan: InnehÃ¥llsplan fÃ¶r 12 mÃ¥n:
    Q1_Offpage: Offpage: 
    Q2_Publicera_Art_Guide: Publicera artiklar/guider:
    Q2_Uppdatera_InnehÃ¥ll: Uppdatera befintligt innehÃ¥ll:
    Q2_Bygga_Authority: Bygga topical authority:
    Q2_LÃ¤nkstrategi_Outreach: Starta lÃ¤nkstrategi och outreach
    Q2_Offpage: Offpage:
    Q3_Nya_Landningssidor: Nya landningssidor:
    Q3_Lokal_Seo: lokal SEO (om relevant):
    Q3_Cro: CRO (A/B-test, UX):
    Q3_Schema_Markup_Rich_Results: schema markup & rich results:
    Q3_Offpage: Offpage:
    Q4_UtvÃ¤rdera_rankingar_trafik: UtvÃ¤rdera rankingar & trafik:
    Q4_Skapa_Avancerat_InnehÃ¥ll: Skapa avancerat innehÃ¥ll (case studies, white papers):
    Q4_Bygga_Starkare_LÃ¤nkar: Bygga starkare lÃ¤nkar:
    Q4_Utbildning_Kund: eventuellt utbildning fÃ¶r kund:
    Q4_Offpage: Offpage:
    Q4_Arsrapport: Ã…rsrapport med resultat mot KPI:er:
    Q4_Roi_Analys: ROI analys:
    Q4_StrategimÃ¶te_Plan: Strategi och plan fÃ¶r nÃ¤sta Ã¥r:
    ";
    

    $response = $openai->chat()->create([
        'model' => 'gpt-4.1',
        'messages' => [
            ['role' => 'system', 'content' => 'Du Ã¤r en SEO-expert. Skriv utfÃ¶rliga, varma och pedagogiska observationer fÃ¶r kunder. FÃ¶lj strikt JSON-strukturen som anges i user-meddelandet.'],
            ['role' => 'user', 'content' => $prompt],
        ],
    ]);

    $text = trim($response->choices[0]->message->content ?? '');

    // FÃ¶rsÃ¶k extrahera JSON-del (om AI lagt text runt omkring)
    if (preg_match('/\{.*\}/s', $text, $matches)) {
        $text = $matches[0];
    }

    $observations = json_decode($text, true);

    $normalized = [
        'teknisk' => '',
        'onpage' => '',
        'offpage' => '',
        'ready' => '',
        'q1_seo_teknisk' => '',
        'q1_nyckelord_atgard' => '',
        'q1_konkurrent_kpi' => '',
        'q1_spÃ¥rning_offpage' => '',
        'q1_title_meta_head_url' => '',
        'q1_sajtstruktur_lÃ¤nkar' => '',
        'q1_innehÃ¥llsplan' => '',
        'q1_offpage' => '',
        'q2_publicera_art_guide' => '',
        'q2_uppdatera_innehÃ¥ll' => '',
        'q2_bygga_authority' => '',
        'q2_lÃ¤nkstrategi_outreach' => '',
        'q2_offpage' => '',
        'q3_nya_landningssidor' => '',
        'q3_lokal_seo' => '',
        'q3_cro' => '',
        'q3_schema_markup_rich_results' => '',
        'q3_offpage' => '',
        'q4_utvÃ¤rdera_rankingar_trafik' => '',
        'q4_skapa_avancerat_innehÃ¥ll' => '',
        'q4_bygga_starkare_lÃ¤nkar' => '',
        'q4_utbildning_kund' => '',
        'q4_offpage' => '',
        'q4_arsrapport' => '',
        'q4_roi_analys' => '',
        'q4_strategimÃ¶te_plan' => '',
        
    ];
    if (is_array($observations)) {
        foreach ($observations as $key => $value) {
            $normalized[strtolower($key)] = $value;
        }
    }

    return response()->json([
        'observations' => $normalized,
    ]);
});


Route::get('/favicon', function (Request $request) {
    $url = $request->query('url');

    if (!$url) {
        return response()->json(['error' => 'URL is required'], 400);
    }

    try {
        $domain = parse_url($url, PHP_URL_HOST);
        $faviconUrl = "https://www.google.com/s2/favicons?sz=64&domain={$domain}";

        // Fetch the favicon from Google S2
        $response = Http::get($faviconUrl);
        if ($response->ok()) {
            $base64 = base64_encode($response->body());
            return response()->json(['favicon' => "data:image/png;base64,{$base64}"]);
        } else {
            return response()->json(['favicon' => null]);
        }
    } catch (\Exception $e) {
        return response()->json(['favicon' => null]);
    }
});


Route::get('/scrape-example', function (Request $request) {
    $domainLink = urldecode($request->query("domainLink"));

    $client = new Client([
        'timeout' => 30, // max 30 sek fÃ¶r scraping
        'headers' => ['User-Agent' => 'Mozilla/5.0']
    ]);

    try {
        $response = $client->request('GET', $domainLink);
        $html = (string) $response->getBody();
    } catch (\Exception $e) {
        return response()->json(['error' => 'Could not scrape page: ' . $e->getMessage()], 500);
    }

    $crawler = new Crawler($html);

    $data = [
        'meta' => [
            'title' => $crawler->filter('title')->count() ? $crawler->filter('title')->text() : null,
            'description' => $crawler->filter('meta[name="description"]')->count() ? $crawler->filter('meta[name="description"]')->attr('content') : null
        ],
        'headings' => [
            'h1' => $crawler->filter('h1')->each(fn($node) => $node->text()),
            'h2' => $crawler->filter('h2')->each(fn($node) => $node->text()),
            'h3' => $crawler->filter('h3')->each(fn($node) => $node->text()),
        ],
        'paragraphs' => $crawler->filter('p')->each(fn($node) => $node->text()),
        'links' => $crawler->filter('a')->each(fn($node) => ['href' => $node->attr('href'), 'text' => $node->text()]),
        'images' => $crawler->filter('img')->each(fn($node) => ['src' => $node->attr('src'), 'alt' => $node->attr('alt')]),
        'cta' => $crawler->filter('a[class*="btn"], a[class*="cta"]')->each(fn($node) => ['text' => $node->text(), 'href' => $node->attr('href')]),
    ];

    return response()->json($data);
});

